---
- name: Install dependencies
  become: true
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: present
  loop:
    - python3
    - python3-pip

- name: Install boto3 and botocore modules
  pip:
    name: "{{ item }}"
    state: present
  loop:
    - boto3
    - botocore

- name: Installing Mysql and dependencies
  become: true
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
  - mysql-server
  - mysql-client 
  - python3-mysqldb
  - libmysqlclient-dev
  register: mysql_install

- name: Stop mysql service
  become: true
  service:
    name: mysql
    state: stopped
  register: mysql_stopped
  when: mysql_install.changed

- name: Copy /var/lib/mysql to /mnt/var/mysql
  become: true
  shell: rsync -av /var/lib/mysql /mnt/var/
  register: mysql_var
  when: mysql_stopped.changed

- name: Edit mysql config
  become: true
  lineinfile:
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: "^# datadir"
    line: "datadir = /mnt/var/mysql"
    state: present
  register: mysql_config
  when: mysql_var.changed

- name: Edit apparmor config
  become: true
  replace:
    path: /etc/apparmor.d/usr.sbin.mysqld
    regexp: '^\s+/var/lib/mysql/(.*)$'
    replace: '  /mnt/var/mysql/\1'
    backup: yes
  register: apparmor
  when: mysql_config.changed

- name: Restart apparmor
  become: true
  service:
    name: apparmor
    state: restarted
  when: apparmor.changed

- name: Restart mysql
  become: true
  service:
    name: mysql
    state: restarted
  when: mysql_config.changed

- name: Creating mysql user {{ user }}
  become: true
  mysql_user:
    name: "{{ user }}"
    password: "{{ user }}"
    priv: '*.*:ALL'
    host: 'localhost'
    state: present

- name: Prepare directory {{ destlocation }}
  become: true
  file:
    path: "{{ destlocation }}"
    state: directory
    mode: 0775
    owner: "{{ lookup('vars','ansible_user') }}"
    group: "{{ lookup('vars','ansible_user') }}"

- name: Download {{ mysqlarch }}
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: "{{ mysqlarch }}"
    dest: "{{ destlocation }}{{ mysqlarch }}"
    mode: get
    overwrite: different
    s3_url: "{{ endpoint_url }}"
  register: mysqlarch_download

- name: Unarchive {{ mysqlarch }}
  unarchive:
    src: "{{ destlocation }}{{ mysqlarch }}"
    dest: "{{ destlocation }}"
    remote_src: yes
  register: mysqlarch_unarchive
  when: mysqlarch_download.changed

- name: Restore mysqldump
  become: true
  shell: "mysql < {{ destlocation }}{{ mysqldump }}"
  when: mysqlarch_unarchive.changed